My small OS (kernel mostly, for now) I build to gain experience, knowledge and dopamine.

* Progress

** Now

For now, the most significant part is working Physical/Virtual/Kernel Memory Management.


If you would run the kernel now, you would see this boring output:

#+begin_src
$ TARGET_ARCH=i686 make kernel && qemu-system-i386 -s -kernel build/i686/kernel/kernel.bin -curses
...
...
...
[0:I] kernel.c:test_allocation:90 | Allocation #32337. Overall allocated 3743e00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32338. Overall allocated 3744500 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32339. Overall allocated 3744c00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32340. Overall allocated 3745300 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32341. Overall allocated 3745a00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32342. Overall allocated 3746100 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32343. Overall allocated 3746800 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32344. Overall allocated 3746f00 bytes
[0:W] kheap.c:vmarea_heap_fault_handler:87 | Not enough physicall space. Trying to trim some caches.

You've been whoopsed.
Reason: Couldn't trim enough space. Bye.

Location: .../yaeos/kernel/kernel/kheap.c:91
#+end_src

** Working on

At the moment, the plan is:

- [ ] Devices.
  + [ ] Make decent modules management.
  + [ ] Make APIs for device interactions (interrupts, register directories, memory buffers).
  + [ ] Move i686 devices from architecture dependent code into the modules.
- [ ] Make this thing work with AArch64.
- [ ] Write PL011 (UART) driver to get serial console.
- [ ] Unit-tests.
  + [ ] Adapt Unity framework for the kernel-space.
  + [ ] Fix tests.
  + [ ] Run unit tests in the kernel-space.
- [ ] Benchmarks.
  + [ ] Implement API for ARMv8 Performance Monitor Extension.
  + [ ] Implement benchmarking.
  + [ ] Benchmark various parts of the kernel.
    I honestly have no idea how bad performance is at the moment. But it's sure is not good.
- [ ] Implement multitasking.
- [ ] Make kernel run on multicore systems.
- [ ] Cert-C compliance
- [ ] ....
