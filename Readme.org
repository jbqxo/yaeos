My small OS (kernel mostly, for now) I build to gain experience and knowledge.

* Progress

** Now

For now, the only achievement of note would be working (somewhat) Memory Management.

"Working" in a sense that it can:

- Find available physical memory (x86 only at the moment). It just takes the info from multiboot, tries to exclude regions occupied by the kernel segments, and passes it forward.

- *Manage physical memory*. Manages regions of physical memory as separate zones. Bookkeeps the info with buddy allocator.

- *Manage virtual memory* for /presumably/ multiple address spaces. Manages areas of virtual memory.

- Allocate memory for the rest of the kernel via *Kernel Memory Manager*. Gives the ability to the rest of the kernel to allocate an arbitrary block of memory, or to allocate a /cache/ of reusable objects. Well, it's your usual SLAB allocator in the end.

If you would run the kernel now, you would see this boring output:

#+begin_src
$ TARGET_ARCH=i686 make kernel && qemu-system-i386 -s -kernel build/i686/kernel/kernel.bin -curses
...
...
...
[0:I] kernel.c:test_allocation:90 | Allocation #32337. Overall allocated 3743e00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32338. Overall allocated 3744500 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32339. Overall allocated 3744c00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32340. Overall allocated 3745300 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32341. Overall allocated 3745a00 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32342. Overall allocated 3746100 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32343. Overall allocated 3746800 bytes
[0:I] kernel.c:test_allocation:90 | Allocation #32344. Overall allocated 3746f00 bytes
[0:W] kheap.c:vmarea_heap_fault_handler:87 | Not enough physicall space. Trying to trim some caches.

You've been whoopsed.
Reason: Couldn't trim enough space. Bye.

Location: .../yaeos/kernel/kernel/kheap.c:91
#+end_src

** Working on

In the beginning, I wrote unit tests for various parts (TDD), but while I struggled to implement working memory managemen, the tests became a hindrance.

Plus there was a problem that I was testing code that was supposed to run in the kernel-space in the user-space. It was fine to some degree, but not really.

So, at the moment, the plan is:

- [ ] Make this thing work with AArch64.
- [ ] Write PL011 (UART) driver to get serial console.
- [ ] Fix tons of warnings by GCC. (Nothing serious, I'm sure of it ;)
- [ ] Make GCC generate more warnings to fix more warnings.
- [ ] Unit-tests.
  + [ ] Adapt Unity framework for the kernel-space.
  + [ ] Fix tests.
  + [ ] Run unit tests in the kernel-space.
- [ ] Benchmarks.
  + [ ] Implement API for ARMv8 Performance Monitor Extension.
  + [ ] Implement benchmarking.
  + [ ] Benchmark various parts of the kernel.
    I honestly have no idea how bad performance is at the moment. But it's sure is not good.
- [ ] Implement multitasking.
- [ ] Make kernel run on multicore systems.
- [ ] ....
